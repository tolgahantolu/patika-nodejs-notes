//! ASYNC/AWAIT yapÄ±sÄ± Promise'lerin farklÄ± bir yazÄ±m ÅŸeklidir diyebiliriz.

const getData = (data) => {
  return new Promise((resolve, reject) => {
    console.log("Veriler alÄ±nmaya baÅŸlÄ±yor...");

    if (data) {
      resolve("Veriler alÄ±ndÄ±");
    } else {
      reject("Veriler alÄ±namadÄ±");
    }
  });
};

const cleanData = (receivedData) => {
  return new Promise((resolve, reject) => {
    console.log("Veriler dÃ¼zenleniyor");

    if (receivedData) {
      resolve("Veriler dÃ¼zenlendi");
    } else {
      reject("Veriler dÃ¼zenlenemedi");
    }
  });
};

// ?PROMISE YAPISI ğŸ‘‡
//getData(true)
//  .then((result) => {
//    console.log(result);
//    return cleanData(true);
//  })
//  .then((result) => console.log(result))
//  .catch((err) => console.log(err));

// ?ASYNC-AWAIT YAPISI ğŸ‘‡
// NOT: Bu yapÄ±da Promise'de olduÄŸu gibi hatalarÄ± yakalamak iÃ§in try-catch bloÄŸunu kullanÄ±rÄ±z.
const processData = async () => {
  try {
    const receivedData = await getData(true); // bu iÅŸlem bitene kadar aÅŸaÄŸÄ±ya geÃ§mez
    console.log(receivedData);

    const cleanedData = await cleanData(false);
    console.log(cleanedData);
  } catch (error) {
    console.log(error);
  }
};
processData();
